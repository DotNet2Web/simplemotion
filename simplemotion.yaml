blueprint:
  name: FoscamMotionTriggersLights
  description: >
    # FoscamMotionTriggersLights

    Turn on lights or scenes when motion is detected by a Foscam surveillance Camera.    
    
    For Details see this forum post:
    
    Features:
     - Triggers lights on based on motion detection by a Foscam camera
     - Wait time for turning off
     - Only run if entity is in desired state (optional)    
  domain: automation
  source_url:
  input:
    motion_entity:
      name: Motion Sensor
      description: Foscam Motion Sensor or a group of motion sensors (e.g. create a group with all motion sensors like Ring sensors or Foscam)
      selector:
        entity:
    light_target:
      name: Light
      selector:
        target:
          entity:
            domain: light
    no_motion_wait:
      name: Wait time
      description: Time to leave the light on after last motion is detected, default two minutes
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds            
    automation_blocker:
      name: Automation Blocker (Optional)
      description: Only run if this boolean is in desired state (see next input)
      default:
      selector:
        entity:
    automation_blocker_boolean:
      name: Automation Blocker Chooser (Optional)
      description: Desired state of automation blocker, choose on for on and off for off
      default: false
      selector:
        boolean: 
    no_motion_blocker:
      name: No Motion Blocker (Optional)
      description: No motion sequence is not run if this boolean is in desired state (see next input)
      default:
      selector:
        entity:
    no_motion_blocker_boolean:
      name: No Motion Chooser (Optional)
      description: Desired state of no motion blocker, choose on for on and off for off
      default: false
      selector:
        boolean:         
    scene_motion:
      name: Scene for the motion (Optional)
      default: scene.none
      selector:
        entity:
          domain: scene
    time_scene_motion_start:
      name: Time for the motion scene to start (Optional)
      description: A time input which defines the time from when the motion window should start.
      default: "00:00:00"
      selector:
        time:
    time_scene_motion_end:
      name: Time for the motion scene to stop (Optional)
      description: A time input which defines the time when the motion window should end.
      default: "00:00:00"
      selector:
        time:
    scene_no_motion:
      name: Default scene for no motion (Optional)
      description: Set this Scene if you want to activate a scene if motion stops
      default: scene.none
      selector:
        entity:
          domain: scene

mode: restart
max_exceeded: silent

variables:
  scene_motion: !input scene_motion
  automation_blocker: !input automation_blocker
  automation_blocker_boolean : !input automation_blocker_boolean
  no_motion_blocker: !input no_motion_blocker
  no_motion_blocker_boolean: !input no_motion_blocker_boolean
  scene_no_motion: !input scene_no_motion
  motion_entity: !input motion_entity

trigger:
  - platform: state
    entity_id: !input motion_entity
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input motion_entity
    from: "False"
    to: "True"
  - platform: state
    entity_id: !input motion_entity
    from: "on"
    to: "off"
    for: !input no_motion_wait
  - platform: state
    entity_id: !input motion_entity
    from: "True"
    to: "False"
    for: !input no_motion_wait   

# All Conditions must be true
condition:
   # Check if automation blocker exist or is in desired state, otherwise do not run
  - condition: or
    conditions:
      - "{{ automation_blocker == none }}"
      - "{{ automation_blocker_boolean and states[automation_blocker].state == 'on' }}"
      - "{{ not automation_blocker_boolean and states[automation_blocker].state == 'off' }}"
  # Check if elevation input exist or is below desired value, otherwise do not run
  - condition: template
    value_template: "{{ (elevation_check == none) or (state_attr('sun.sun','elevation') <= elevation_check | float(90)) }}"

action:
  - choose:
      # Trigger to state == "on"
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}" 
        sequence:
          - choose:
              # Motion  Scene
              - conditions:
                  - "{{ scene_motion != 'scene.none'}}"
                  - condition: time
                    after: !input time_scene_motion_start
                    before: !input time_scene_motion_end
                sequence:
                  - scene: !input scene_motion            
            # If State -> "On" defaulting to turn light on
            default:
              - service: light.turn_on
                target: !input light_target
      # Trigger to state = "off"
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
          # Check if no motion blocker exist or in in desired state, otherwise do not run any no motion action            
          - condition: or
            conditions:
              - "{{ no_motion_blocker == none }}"
              - "{{ no_motion_blocker_boolean and states[no_motion_blocker].state == 'on' }}"
              - "{{ not no_motion_blocker_boolean and states[no_motion_blocker].state == 'off' }}"
        sequence:          
          - choose:
              # Used if default no motion scene is set
              - conditions:
                  - "{{ scene_no_motion != 'scene.none' }}"
                sequence:
                  - scene: !input scene_no_motion
              # If State -> "off" default to turn lights off
            default:
              - service: light.turn_off
                target: !input light_target
      # Trigger to state == "True"
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'True' }}" 
        sequence:
          - choose:
              # Motion  Scene
              - conditions:
                  - "{{ scene_motion != 'scene.none'}}"
                  - condition: time
                    after: !input time_scene_motion_start
                    before: !input time_scene_motion_end
                sequence:
                  - scene: !input scene_motion            
            # If State -> "True" defaulting to turn light on
            default:
              - service: light.turn_on
                target: !input light_target
      # Trigger to state = "False"
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'False' }}"
          # Check if no motion blocker exist or in in desired state, otherwise do not run any no motion action            
          - condition: or
            conditions:
              - "{{ no_motion_blocker == none }}"
              - "{{ no_motion_blocker_boolean and states[no_motion_blocker].state == 'on' }}"
              - "{{ not no_motion_blocker_boolean and states[no_motion_blocker].state == 'off' }}"
        sequence:          
          - choose:
              # Used if default no motion scene is set
              - conditions:
                  - "{{ scene_no_motion != 'scene.none' }}"
                sequence:
                  - scene: !input scene_no_motion
              # If State -> "off" default to turn lights off
            default:
              - service: light.turn_off
                target: !input light_target